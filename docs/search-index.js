crystal_doc_search_index_callback({"repository_name":"github.com/Willamin/stdimp","body":"# stdimp\n\n_Standard Library Improvements_\n\nThis library is designed to provide a number of quality-of-life improvements to the Crystal Standard Library. Generally, you won't want to import the entirety of `stdimp`, but only a subset of its features that you find helpful.\n\n## Contributing\n\n1. Fork it ( https://github.com/willamin/stdimp/fork )\n2. Create your feature branch (git checkout -b my-new-feature)\n3. Commit your changes (git commit -am 'Add some feature')\n4. Push to the branch (git push origin my-new-feature)\n5. Create a new Pull Request\n\n## Contributors\n\n- [willamin](https://github.com/willamin) Will Lewis - creator, maintainer\n","program":{"html_id":"github.com/Willamin/stdimp/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"github.com/Willamin/stdimp","program":true,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"github.com/Willamin/stdimp/Array","path":"Array.html","kind":"class","full_name":"Array(T)","name":"Array","abstract":false,"superclass":{"html_id":"github.com/Willamin/stdimp/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/Willamin/stdimp/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"github.com/Willamin/stdimp/Indexable","kind":"module","full_name":"Indexable","name":"Indexable"},{"html_id":"github.com/Willamin/stdimp/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"github.com/Willamin/stdimp/Iterable","kind":"module","full_name":"Iterable","name":"Iterable"},{"html_id":"github.com/Willamin/stdimp/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/Willamin/stdimp/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"array/as_tuple.cr","line_number":1,"url":"https://github.com/Willamin/stdimp/blob/5cde5d3ad4a9289062d1ebcde6af61fcd63f0e6a/src/array/as_tuple.cr"},{"filename":"array/requiring.cr","line_number":1,"url":"https://github.com/Willamin/stdimp/blob/5cde5d3ad4a9289062d1ebcde6af61fcd63f0e6a/src/array/requiring.cr"},{"filename":"array/split_by.cr","line_number":1,"url":"https://github.com/Willamin/stdimp/blob/5cde5d3ad4a9289062d1ebcde6af61fcd63f0e6a/src/array/split_by.cr"}],"repository_name":"github.com/Willamin/stdimp","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"github.com/Willamin/stdimp/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"github.com/Willamin/stdimp/Indexable","kind":"module","full_name":"Indexable","name":"Indexable"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":"An `Array` is an ordered, integer-indexed collection of objects of type T.\n\nArray indexing starts at 0. A negative index is assumed to be\nrelative to the end of the array: -1 indicates the last element,\n-2 is the next to last element, and so on.\n\nAn `Array` can be created using the usual `new` method (several are provided), or with an array literal:\n\n```\nArray(Int32).new  # => []\n[1, 2, 3]         # Array(Int32)\n[1, \"hello\", 'x'] # Array(Int32 | String | Char)\n```\n\nAn `Array` can have mixed types, meaning T will be a union of types, but these are determined\nwhen the array is created, either by specifying T or by using an array literal. In the latter\ncase, T will be set to the union of the array literal elements' types.\n\nWhen creating an empty array you must always specify T:\n\n```\n[] of Int32 # same as Array(Int32)\n[]          # syntax error\n```\n\nAn `Array` is implemented using an internal buffer of some capacity\nand is reallocated when elements are pushed to it when more capacity\nis needed. This is normally known as a [dynamic array](http://en.wikipedia.org/wiki/Dynamic_array).\n\nYou can use a special array literal syntax with other types too, as long as they define an argless\n`new` method and a `<<` method. `Set` is one such type:\n\n```\nset = Set{1, 2, 3} # => Set{1, 2, 3}\nset.class          # => Set(Int32)\n```\n\nThe above is the same as this:\n\n```\nset = Set(typeof(1, 2, 3)).new\nset << 1\nset << 2\nset << 3\n```","summary":"<p>An <code><a href=\"Array.html\">Array</a></code> is an ordered, integer-indexed collection of objects of type T.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"as_10_tuple!-instance-method","html_id":"as_10_tuple!-instance-method","name":"as_10_tuple!","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Willamin/stdimp/blob/5cde5d3ad4a9289062d1ebcde6af61fcd63f0e6a/src/array/as_tuple.cr#L2","def":{"name":"as_10_tuple!","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"{self[0], self[1], self[2], self[3], self[4], self[5], self[6], self[7], self[8], self[9]}"}},{"id":"as_10_tuple?-instance-method","html_id":"as_10_tuple?-instance-method","name":"as_10_tuple?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Willamin/stdimp/blob/5cde5d3ad4a9289062d1ebcde6af61fcd63f0e6a/src/array/as_tuple.cr#L2","def":{"name":"as_10_tuple?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"{self[0]?, self[1]?, self[2]?, self[3]?, self[4]?, self[5]?, self[6]?, self[7]?, self[8]?, self[9]?}"}},{"id":"as_11_tuple!-instance-method","html_id":"as_11_tuple!-instance-method","name":"as_11_tuple!","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Willamin/stdimp/blob/5cde5d3ad4a9289062d1ebcde6af61fcd63f0e6a/src/array/as_tuple.cr#L2","def":{"name":"as_11_tuple!","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"{self[0], self[1], self[2], self[3], self[4], self[5], self[6], self[7], self[8], self[9], self[10]}"}},{"id":"as_11_tuple?-instance-method","html_id":"as_11_tuple?-instance-method","name":"as_11_tuple?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Willamin/stdimp/blob/5cde5d3ad4a9289062d1ebcde6af61fcd63f0e6a/src/array/as_tuple.cr#L2","def":{"name":"as_11_tuple?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"{self[0]?, self[1]?, self[2]?, self[3]?, self[4]?, self[5]?, self[6]?, self[7]?, self[8]?, self[9]?, self[10]?}"}},{"id":"as_12_tuple!-instance-method","html_id":"as_12_tuple!-instance-method","name":"as_12_tuple!","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Willamin/stdimp/blob/5cde5d3ad4a9289062d1ebcde6af61fcd63f0e6a/src/array/as_tuple.cr#L2","def":{"name":"as_12_tuple!","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"{self[0], self[1], self[2], self[3], self[4], self[5], self[6], self[7], self[8], self[9], self[10], self[11]}"}},{"id":"as_12_tuple?-instance-method","html_id":"as_12_tuple?-instance-method","name":"as_12_tuple?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Willamin/stdimp/blob/5cde5d3ad4a9289062d1ebcde6af61fcd63f0e6a/src/array/as_tuple.cr#L2","def":{"name":"as_12_tuple?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"{self[0]?, self[1]?, self[2]?, self[3]?, self[4]?, self[5]?, self[6]?, self[7]?, self[8]?, self[9]?, self[10]?, self[11]?}"}},{"id":"as_13_tuple!-instance-method","html_id":"as_13_tuple!-instance-method","name":"as_13_tuple!","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Willamin/stdimp/blob/5cde5d3ad4a9289062d1ebcde6af61fcd63f0e6a/src/array/as_tuple.cr#L2","def":{"name":"as_13_tuple!","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"{self[0], self[1], self[2], self[3], self[4], self[5], self[6], self[7], self[8], self[9], self[10], self[11], self[12]}"}},{"id":"as_13_tuple?-instance-method","html_id":"as_13_tuple?-instance-method","name":"as_13_tuple?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Willamin/stdimp/blob/5cde5d3ad4a9289062d1ebcde6af61fcd63f0e6a/src/array/as_tuple.cr#L2","def":{"name":"as_13_tuple?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"{self[0]?, self[1]?, self[2]?, self[3]?, self[4]?, self[5]?, self[6]?, self[7]?, self[8]?, self[9]?, self[10]?, self[11]?, self[12]?}"}},{"id":"as_14_tuple!-instance-method","html_id":"as_14_tuple!-instance-method","name":"as_14_tuple!","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Willamin/stdimp/blob/5cde5d3ad4a9289062d1ebcde6af61fcd63f0e6a/src/array/as_tuple.cr#L2","def":{"name":"as_14_tuple!","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"{self[0], self[1], self[2], self[3], self[4], self[5], self[6], self[7], self[8], self[9], self[10], self[11], self[12], self[13]}"}},{"id":"as_14_tuple?-instance-method","html_id":"as_14_tuple?-instance-method","name":"as_14_tuple?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Willamin/stdimp/blob/5cde5d3ad4a9289062d1ebcde6af61fcd63f0e6a/src/array/as_tuple.cr#L2","def":{"name":"as_14_tuple?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"{self[0]?, self[1]?, self[2]?, self[3]?, self[4]?, self[5]?, self[6]?, self[7]?, self[8]?, self[9]?, self[10]?, self[11]?, self[12]?, self[13]?}"}},{"id":"as_15_tuple!-instance-method","html_id":"as_15_tuple!-instance-method","name":"as_15_tuple!","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Willamin/stdimp/blob/5cde5d3ad4a9289062d1ebcde6af61fcd63f0e6a/src/array/as_tuple.cr#L2","def":{"name":"as_15_tuple!","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"{self[0], self[1], self[2], self[3], self[4], self[5], self[6], self[7], self[8], self[9], self[10], self[11], self[12], self[13], self[14]}"}},{"id":"as_15_tuple?-instance-method","html_id":"as_15_tuple?-instance-method","name":"as_15_tuple?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Willamin/stdimp/blob/5cde5d3ad4a9289062d1ebcde6af61fcd63f0e6a/src/array/as_tuple.cr#L2","def":{"name":"as_15_tuple?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"{self[0]?, self[1]?, self[2]?, self[3]?, self[4]?, self[5]?, self[6]?, self[7]?, self[8]?, self[9]?, self[10]?, self[11]?, self[12]?, self[13]?, self[14]?}"}},{"id":"as_16_tuple!-instance-method","html_id":"as_16_tuple!-instance-method","name":"as_16_tuple!","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Willamin/stdimp/blob/5cde5d3ad4a9289062d1ebcde6af61fcd63f0e6a/src/array/as_tuple.cr#L2","def":{"name":"as_16_tuple!","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"{self[0], self[1], self[2], self[3], self[4], self[5], self[6], self[7], self[8], self[9], self[10], self[11], self[12], self[13], self[14], self[15]}"}},{"id":"as_16_tuple?-instance-method","html_id":"as_16_tuple?-instance-method","name":"as_16_tuple?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Willamin/stdimp/blob/5cde5d3ad4a9289062d1ebcde6af61fcd63f0e6a/src/array/as_tuple.cr#L2","def":{"name":"as_16_tuple?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"{self[0]?, self[1]?, self[2]?, self[3]?, self[4]?, self[5]?, self[6]?, self[7]?, self[8]?, self[9]?, self[10]?, self[11]?, self[12]?, self[13]?, self[14]?, self[15]?}"}},{"id":"as_17_tuple!-instance-method","html_id":"as_17_tuple!-instance-method","name":"as_17_tuple!","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Willamin/stdimp/blob/5cde5d3ad4a9289062d1ebcde6af61fcd63f0e6a/src/array/as_tuple.cr#L2","def":{"name":"as_17_tuple!","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"{self[0], self[1], self[2], self[3], self[4], self[5], self[6], self[7], self[8], self[9], self[10], self[11], self[12], self[13], self[14], self[15], self[16]}"}},{"id":"as_17_tuple?-instance-method","html_id":"as_17_tuple?-instance-method","name":"as_17_tuple?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Willamin/stdimp/blob/5cde5d3ad4a9289062d1ebcde6af61fcd63f0e6a/src/array/as_tuple.cr#L2","def":{"name":"as_17_tuple?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"{self[0]?, self[1]?, self[2]?, self[3]?, self[4]?, self[5]?, self[6]?, self[7]?, self[8]?, self[9]?, self[10]?, self[11]?, self[12]?, self[13]?, self[14]?, self[15]?, self[16]?}"}},{"id":"as_18_tuple!-instance-method","html_id":"as_18_tuple!-instance-method","name":"as_18_tuple!","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Willamin/stdimp/blob/5cde5d3ad4a9289062d1ebcde6af61fcd63f0e6a/src/array/as_tuple.cr#L2","def":{"name":"as_18_tuple!","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"{self[0], self[1], self[2], self[3], self[4], self[5], self[6], self[7], self[8], self[9], self[10], self[11], self[12], self[13], self[14], self[15], self[16], self[17]}"}},{"id":"as_18_tuple?-instance-method","html_id":"as_18_tuple?-instance-method","name":"as_18_tuple?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Willamin/stdimp/blob/5cde5d3ad4a9289062d1ebcde6af61fcd63f0e6a/src/array/as_tuple.cr#L2","def":{"name":"as_18_tuple?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"{self[0]?, self[1]?, self[2]?, self[3]?, self[4]?, self[5]?, self[6]?, self[7]?, self[8]?, self[9]?, self[10]?, self[11]?, self[12]?, self[13]?, self[14]?, self[15]?, self[16]?, self[17]?}"}},{"id":"as_19_tuple!-instance-method","html_id":"as_19_tuple!-instance-method","name":"as_19_tuple!","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Willamin/stdimp/blob/5cde5d3ad4a9289062d1ebcde6af61fcd63f0e6a/src/array/as_tuple.cr#L2","def":{"name":"as_19_tuple!","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"{self[0], self[1], self[2], self[3], self[4], self[5], self[6], self[7], self[8], self[9], self[10], self[11], self[12], self[13], self[14], self[15], self[16], self[17], self[18]}"}},{"id":"as_19_tuple?-instance-method","html_id":"as_19_tuple?-instance-method","name":"as_19_tuple?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Willamin/stdimp/blob/5cde5d3ad4a9289062d1ebcde6af61fcd63f0e6a/src/array/as_tuple.cr#L2","def":{"name":"as_19_tuple?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"{self[0]?, self[1]?, self[2]?, self[3]?, self[4]?, self[5]?, self[6]?, self[7]?, self[8]?, self[9]?, self[10]?, self[11]?, self[12]?, self[13]?, self[14]?, self[15]?, self[16]?, self[17]?, self[18]?}"}},{"id":"as_1_tuple!-instance-method","html_id":"as_1_tuple!-instance-method","name":"as_1_tuple!","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Willamin/stdimp/blob/5cde5d3ad4a9289062d1ebcde6af61fcd63f0e6a/src/array/as_tuple.cr#L2","def":{"name":"as_1_tuple!","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"{self[0]}"}},{"id":"as_1_tuple?-instance-method","html_id":"as_1_tuple?-instance-method","name":"as_1_tuple?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Willamin/stdimp/blob/5cde5d3ad4a9289062d1ebcde6af61fcd63f0e6a/src/array/as_tuple.cr#L2","def":{"name":"as_1_tuple?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"{self[0]?}"}},{"id":"as_20_tuple!-instance-method","html_id":"as_20_tuple!-instance-method","name":"as_20_tuple!","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Willamin/stdimp/blob/5cde5d3ad4a9289062d1ebcde6af61fcd63f0e6a/src/array/as_tuple.cr#L2","def":{"name":"as_20_tuple!","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"{self[0], self[1], self[2], self[3], self[4], self[5], self[6], self[7], self[8], self[9], self[10], self[11], self[12], self[13], self[14], self[15], self[16], self[17], self[18], self[19]}"}},{"id":"as_20_tuple?-instance-method","html_id":"as_20_tuple?-instance-method","name":"as_20_tuple?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Willamin/stdimp/blob/5cde5d3ad4a9289062d1ebcde6af61fcd63f0e6a/src/array/as_tuple.cr#L2","def":{"name":"as_20_tuple?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"{self[0]?, self[1]?, self[2]?, self[3]?, self[4]?, self[5]?, self[6]?, self[7]?, self[8]?, self[9]?, self[10]?, self[11]?, self[12]?, self[13]?, self[14]?, self[15]?, self[16]?, self[17]?, self[18]?, self[19]?}"}},{"id":"as_2_tuple!-instance-method","html_id":"as_2_tuple!-instance-method","name":"as_2_tuple!","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Willamin/stdimp/blob/5cde5d3ad4a9289062d1ebcde6af61fcd63f0e6a/src/array/as_tuple.cr#L2","def":{"name":"as_2_tuple!","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"{self[0], self[1]}"}},{"id":"as_2_tuple?-instance-method","html_id":"as_2_tuple?-instance-method","name":"as_2_tuple?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Willamin/stdimp/blob/5cde5d3ad4a9289062d1ebcde6af61fcd63f0e6a/src/array/as_tuple.cr#L2","def":{"name":"as_2_tuple?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"{self[0]?, self[1]?}"}},{"id":"as_3_tuple!-instance-method","html_id":"as_3_tuple!-instance-method","name":"as_3_tuple!","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Willamin/stdimp/blob/5cde5d3ad4a9289062d1ebcde6af61fcd63f0e6a/src/array/as_tuple.cr#L2","def":{"name":"as_3_tuple!","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"{self[0], self[1], self[2]}"}},{"id":"as_3_tuple?-instance-method","html_id":"as_3_tuple?-instance-method","name":"as_3_tuple?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Willamin/stdimp/blob/5cde5d3ad4a9289062d1ebcde6af61fcd63f0e6a/src/array/as_tuple.cr#L2","def":{"name":"as_3_tuple?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"{self[0]?, self[1]?, self[2]?}"}},{"id":"as_4_tuple!-instance-method","html_id":"as_4_tuple!-instance-method","name":"as_4_tuple!","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Willamin/stdimp/blob/5cde5d3ad4a9289062d1ebcde6af61fcd63f0e6a/src/array/as_tuple.cr#L2","def":{"name":"as_4_tuple!","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"{self[0], self[1], self[2], self[3]}"}},{"id":"as_4_tuple?-instance-method","html_id":"as_4_tuple?-instance-method","name":"as_4_tuple?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Willamin/stdimp/blob/5cde5d3ad4a9289062d1ebcde6af61fcd63f0e6a/src/array/as_tuple.cr#L2","def":{"name":"as_4_tuple?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"{self[0]?, self[1]?, self[2]?, self[3]?}"}},{"id":"as_5_tuple!-instance-method","html_id":"as_5_tuple!-instance-method","name":"as_5_tuple!","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Willamin/stdimp/blob/5cde5d3ad4a9289062d1ebcde6af61fcd63f0e6a/src/array/as_tuple.cr#L2","def":{"name":"as_5_tuple!","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"{self[0], self[1], self[2], self[3], self[4]}"}},{"id":"as_5_tuple?-instance-method","html_id":"as_5_tuple?-instance-method","name":"as_5_tuple?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Willamin/stdimp/blob/5cde5d3ad4a9289062d1ebcde6af61fcd63f0e6a/src/array/as_tuple.cr#L2","def":{"name":"as_5_tuple?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"{self[0]?, self[1]?, self[2]?, self[3]?, self[4]?}"}},{"id":"as_6_tuple!-instance-method","html_id":"as_6_tuple!-instance-method","name":"as_6_tuple!","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Willamin/stdimp/blob/5cde5d3ad4a9289062d1ebcde6af61fcd63f0e6a/src/array/as_tuple.cr#L2","def":{"name":"as_6_tuple!","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"{self[0], self[1], self[2], self[3], self[4], self[5]}"}},{"id":"as_6_tuple?-instance-method","html_id":"as_6_tuple?-instance-method","name":"as_6_tuple?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Willamin/stdimp/blob/5cde5d3ad4a9289062d1ebcde6af61fcd63f0e6a/src/array/as_tuple.cr#L2","def":{"name":"as_6_tuple?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"{self[0]?, self[1]?, self[2]?, self[3]?, self[4]?, self[5]?}"}},{"id":"as_7_tuple!-instance-method","html_id":"as_7_tuple!-instance-method","name":"as_7_tuple!","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Willamin/stdimp/blob/5cde5d3ad4a9289062d1ebcde6af61fcd63f0e6a/src/array/as_tuple.cr#L2","def":{"name":"as_7_tuple!","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"{self[0], self[1], self[2], self[3], self[4], self[5], self[6]}"}},{"id":"as_7_tuple?-instance-method","html_id":"as_7_tuple?-instance-method","name":"as_7_tuple?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Willamin/stdimp/blob/5cde5d3ad4a9289062d1ebcde6af61fcd63f0e6a/src/array/as_tuple.cr#L2","def":{"name":"as_7_tuple?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"{self[0]?, self[1]?, self[2]?, self[3]?, self[4]?, self[5]?, self[6]?}"}},{"id":"as_8_tuple!-instance-method","html_id":"as_8_tuple!-instance-method","name":"as_8_tuple!","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Willamin/stdimp/blob/5cde5d3ad4a9289062d1ebcde6af61fcd63f0e6a/src/array/as_tuple.cr#L2","def":{"name":"as_8_tuple!","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"{self[0], self[1], self[2], self[3], self[4], self[5], self[6], self[7]}"}},{"id":"as_8_tuple?-instance-method","html_id":"as_8_tuple?-instance-method","name":"as_8_tuple?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Willamin/stdimp/blob/5cde5d3ad4a9289062d1ebcde6af61fcd63f0e6a/src/array/as_tuple.cr#L2","def":{"name":"as_8_tuple?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"{self[0]?, self[1]?, self[2]?, self[3]?, self[4]?, self[5]?, self[6]?, self[7]?}"}},{"id":"as_9_tuple!-instance-method","html_id":"as_9_tuple!-instance-method","name":"as_9_tuple!","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Willamin/stdimp/blob/5cde5d3ad4a9289062d1ebcde6af61fcd63f0e6a/src/array/as_tuple.cr#L2","def":{"name":"as_9_tuple!","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"{self[0], self[1], self[2], self[3], self[4], self[5], self[6], self[7], self[8]}"}},{"id":"as_9_tuple?-instance-method","html_id":"as_9_tuple?-instance-method","name":"as_9_tuple?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Willamin/stdimp/blob/5cde5d3ad4a9289062d1ebcde6af61fcd63f0e6a/src/array/as_tuple.cr#L2","def":{"name":"as_9_tuple?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"{self[0]?, self[1]?, self[2]?, self[3]?, self[4]?, self[5]?, self[6]?, self[7]?, self[8]?}"}},{"id":"requiring(minimum:Int32,&)-instance-method","html_id":"requiring(minimum:Int32,&amp;)-instance-method","name":"requiring","doc":null,"summary":null,"abstract":false,"args":[{"name":"minimum","doc":null,"default_value":"","external_name":"minimum","restriction":"Int32"}],"args_string":"(minimum : Int32, &)","source_link":"https://github.com/Willamin/stdimp/blob/5cde5d3ad4a9289062d1ebcde6af61fcd63f0e6a/src/array/requiring.cr#L2","def":{"name":"requiring","args":[{"name":"minimum","doc":null,"default_value":"","external_name":"minimum","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"if self.size >= minimum\n  self\nelse\n  yield self\nend"}},{"id":"split_by(separator:T):Array(Array(T))-instance-method","html_id":"split_by(separator:T):Array(Array(T))-instance-method","name":"split_by","doc":null,"summary":null,"abstract":false,"args":[{"name":"separator","doc":null,"default_value":"","external_name":"separator","restriction":"T"}],"args_string":"(separator : T) : Array(Array(T))","source_link":"https://github.com/Willamin/stdimp/blob/5cde5d3ad4a9289062d1ebcde6af61fcd63f0e6a/src/array/split_by.cr#L2","def":{"name":"split_by","args":[{"name":"separator","doc":null,"default_value":"","external_name":"separator","restriction":"T"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(Array(T))","visibility":"Public","body":"output = [] of Array(T)\ncurrent = [] of T\nself.each do |item|\n  if item == separator\n    if current.size > 0\n      output << current\n    end\n    current = [] of T\n  else\n    current << item\n  end\nend\nif current.size > 0\n  output << current\nend\noutput\n"}}],"macros":[],"types":[]},{"html_id":"github.com/Willamin/stdimp/Bool","path":"Bool.html","kind":"struct","full_name":"Bool","name":"Bool","abstract":false,"superclass":{"html_id":"github.com/Willamin/stdimp/Value","kind":"struct","full_name":"Value","name":"Value"},"ancestors":[{"html_id":"github.com/Willamin/stdimp/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"github.com/Willamin/stdimp/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"bool/inverted.cr","line_number":1,"url":"https://github.com/Willamin/stdimp/blob/5cde5d3ad4a9289062d1ebcde6af61fcd63f0e6a/src/bool/inverted.cr"}],"repository_name":"github.com/Willamin/stdimp","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":"Bool has only two possible values: `true` and `false`. They are constructed using these literals:\n\n```\ntrue  # A Bool that is true\nfalse # A Bool that is false\n```","summary":"<p>Bool has only two possible values: <code>true</code> and <code>false</code>.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"inverted-instance-method","html_id":"inverted-instance-method","name":"inverted","doc":"Inverts a bool\n\nThis provides a convenient inversion method for use in method chains.\n```crystal\nis_hidden = true\n\nis_hidden\n  .inverted\n  .map { |b| b ? \"yes\" : \"no\" }\n```","summary":"<p>Inverts a bool</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Willamin/stdimp/blob/5cde5d3ad4a9289062d1ebcde6af61fcd63f0e6a/src/bool/inverted.cr#L12","def":{"name":"inverted","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"!self"}}],"macros":[],"types":[]},{"html_id":"github.com/Willamin/stdimp/Nil","path":"Nil.html","kind":"struct","full_name":"Nil","name":"Nil","abstract":false,"superclass":{"html_id":"github.com/Willamin/stdimp/Value","kind":"struct","full_name":"Value","name":"Value"},"ancestors":[{"html_id":"github.com/Willamin/stdimp/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"github.com/Willamin/stdimp/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"nil/fail.cr","line_number":1,"url":"https://github.com/Willamin/stdimp/blob/5cde5d3ad4a9289062d1ebcde6af61fcd63f0e6a/src/nil/fail.cr"}],"repository_name":"github.com/Willamin/stdimp","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":"The `Nil` type has only one possible value: `nil`.\n\n`nil` is commonly used to represent the absence of a value.\nFor example, `String#index` returns the position of the character or `nil` if it's not\nin the string:\n\n```\nstr = \"Hello world\"\nstr.index 'e' # => 1\nstr.index 'a' # => nil\n```\n\nIn the above example, trying to invoke a method on the returned value will\ngive a compile time error unless both `Int32` and `Nil` define that method:\n\n```\nstr = \"Hello world\"\nidx = str.index 'e'\nidx + 1 # Error: undefined method '+' for Nil\n```\n\nThe language and the standard library provide short, readable, easy ways to deal with `nil`,\nsuch as `Object#try` and `Object#not_nil!`:\n\n```\nstr = \"Hello world\"\n\n# The index of 'e' in str or 0 if not found\nidx1 = str.index('e') || 0\n\nidx2 = str.index('a')\nif idx2\n  # Compiles: idx2 can't be nil here\n  idx2 + 1\nend\n\n# Tell the compiler that we are sure the returned\n# value is not nil: raises a runtime exception\n# if our assumption doesn't hold.\nidx3 = str.index('o').not_nil!\n```","summary":"<p>The <code><a href=\"Nil.html\">Nil</a></code> type has only one possible value: <code>nil</code>.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"fail(&)-instance-method","html_id":"fail(&amp;)-instance-method","name":"fail","doc":"Handle a failed try\n\nFor use in method chaining as an inverse of `.try`\n```crystal\nInt32.parse(\"5\")\n  .try { |s| \"parse #{s} successfully\" }\n  .fail { \"something went wrong\" }\n```","summary":"<p>Handle a failed try</p>","abstract":false,"args":[],"args_string":"(&)","source_link":"https://github.com/Willamin/stdimp/blob/5cde5d3ad4a9289062d1ebcde6af61fcd63f0e6a/src/nil/fail.cr#L10","def":{"name":"fail","args":[],"double_splat":null,"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"yield"}}],"macros":[],"types":[]},{"html_id":"github.com/Willamin/stdimp/Object","path":"Object.html","kind":"class","full_name":"Object","name":"Object","abstract":true,"superclass":null,"ancestors":[],"locations":[{"filename":"object/methods.cr","line_number":1,"url":"https://github.com/Willamin/stdimp/blob/5cde5d3ad4a9289062d1ebcde6af61fcd63f0e6a/src/object/methods.cr"},{"filename":"object/pipe.cr","line_number":1,"url":"https://github.com/Willamin/stdimp/blob/5cde5d3ad4a9289062d1ebcde6af61fcd63f0e6a/src/object/pipe.cr"},{"filename":"object/selftap.cr","line_number":1,"url":"https://github.com/Willamin/stdimp/blob/5cde5d3ad4a9289062d1ebcde6af61fcd63f0e6a/src/object/selftap.cr"}],"repository_name":"github.com/Willamin/stdimp","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":"`Object` is the base type of all Crystal objects.","summary":"<p><code><a href=\"Object.html\">Object</a></code> is the base type of all Crystal objects.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"methods:Array(String)-instance-method","html_id":"methods:Array(String)-instance-method","name":"methods","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Array(String)","source_link":"https://github.com/Willamin/stdimp/blob/5cde5d3ad4a9289062d1ebcde6af61fcd63f0e6a/src/object/methods.cr#L2","def":{"name":"methods","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(String)","visibility":"Public","body":"{{ @type.methods.map do |__arg0|\n  __arg0.name.stringify\nend }}"}},{"id":"pipe(&)-instance-method","html_id":"pipe(&amp;)-instance-method","name":"pipe","doc":"Pipes itself\n\nHelpful in writing method-chain pipelines when adding a method to the isn't preferred.\n\n```crystal\n\"hello\"\n  .pipe { |x| Base64.encode(x) }\n  .pipe { |y| puts(y) }\n```","summary":"<p>Pipes itself</p>","abstract":false,"args":[],"args_string":"(&)","source_link":"https://github.com/Willamin/stdimp/blob/5cde5d3ad4a9289062d1ebcde6af61fcd63f0e6a/src/object/pipe.cr#L11","def":{"name":"pipe","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"yield self"}},{"id":"selftap(&)-instance-method","html_id":"selftap(&amp;)-instance-method","name":"selftap","doc":"Taps into itself\n\nThis is for use with APIs that are geared more towards a DSL approach, changing the default method receiver.\n```crystal\nclass Person\n  def say_hello\n    puts \"hello\"\n  end\nend\n\nPerson.new.selftap do\n  say_hello\nend\n```","summary":"<p>Taps into itself</p>","abstract":false,"args":[],"args_string":"(&)","source_link":"https://github.com/Willamin/stdimp/blob/5cde5d3ad4a9289062d1ebcde6af61fcd63f0e6a/src/object/selftap.cr#L16","def":{"name":"selftap","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"with self yield\nself\n"}}],"macros":[],"types":[]},{"html_id":"github.com/Willamin/stdimp/String","path":"String.html","kind":"class","full_name":"String","name":"String","abstract":false,"superclass":{"html_id":"github.com/Willamin/stdimp/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/Willamin/stdimp/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"github.com/Willamin/stdimp/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/Willamin/stdimp/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"string/append.cr","line_number":1,"url":"https://github.com/Willamin/stdimp/blob/5cde5d3ad4a9289062d1ebcde6af61fcd63f0e6a/src/string/append.cr"},{"filename":"string/formatted.cr","line_number":1,"url":"https://github.com/Willamin/stdimp/blob/5cde5d3ad4a9289062d1ebcde6af61fcd63f0e6a/src/string/formatted.cr"},{"filename":"string/prepend.cr","line_number":1,"url":"https://github.com/Willamin/stdimp/blob/5cde5d3ad4a9289062d1ebcde6af61fcd63f0e6a/src/string/prepend.cr"},{"filename":"string/puts.cr","line_number":2,"url":"https://github.com/Willamin/stdimp/blob/5cde5d3ad4a9289062d1ebcde6af61fcd63f0e6a/src/string/puts.cr"}],"repository_name":"github.com/Willamin/stdimp","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"github.com/Willamin/stdimp/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":"","summary":"","class_methods":[],"constructors":[],"instance_methods":[{"id":"append(other:String):String-instance-method","html_id":"append(other:String):String-instance-method","name":"append","doc":null,"summary":null,"abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"String"}],"args_string":"(other : String) : String","source_link":"https://github.com/Willamin/stdimp/blob/5cde5d3ad4a9289062d1ebcde6af61fcd63f0e6a/src/string/append.cr#L2","def":{"name":"append","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"self + other"}},{"id":"formatted(format:String):String-instance-method","html_id":"formatted(format:String):String-instance-method","name":"formatted","doc":null,"summary":null,"abstract":false,"args":[{"name":"format","doc":null,"default_value":"","external_name":"format","restriction":"String"}],"args_string":"(format : String) : String","source_link":"https://github.com/Willamin/stdimp/blob/5cde5d3ad4a9289062d1ebcde6af61fcd63f0e6a/src/string/formatted.cr#L2","def":{"name":"formatted","args":[{"name":"format","doc":null,"default_value":"","external_name":"format","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"format % self"}},{"id":"prepend(other:String):String-instance-method","html_id":"prepend(other:String):String-instance-method","name":"prepend","doc":null,"summary":null,"abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"String"}],"args_string":"(other : String) : String","source_link":"https://github.com/Willamin/stdimp/blob/5cde5d3ad4a9289062d1ebcde6af61fcd63f0e6a/src/string/prepend.cr#L2","def":{"name":"prepend","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"other + self"}},{"id":"puts(io:IO=STDOUT)-instance-method","html_id":"puts(io:IO=STDOUT)-instance-method","name":"puts","doc":"Puts itself\n\nOften I find myself creating a pipeline of tranformations via method chaining, when I'll end up wanting to `puts` the end result.\n```crystal\n\"hello\"\n  .upcase\n  .reverse\n  .puts\n```","summary":"<p>Puts itself</p>","abstract":false,"args":[{"name":"io","doc":null,"default_value":"STDOUT","external_name":"io","restriction":"IO"}],"args_string":"(io : IO = <span class=\"t\">STDOUT</span>)","source_link":"https://github.com/Willamin/stdimp/blob/5cde5d3ad4a9289062d1ebcde6af61fcd63f0e6a/src/string/puts.cr#L12","def":{"name":"puts","args":[{"name":"io","doc":null,"default_value":"STDOUT","external_name":"io","restriction":"IO"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"io.puts(self)"}}],"macros":[],"types":[]}]}})